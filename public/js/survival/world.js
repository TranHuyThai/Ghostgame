import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';
import { scene} from '../../../main.js';

// Set up loader for 3D models
const GLTFloader = new GLTFLoader();


const objects = {
    spawner: [
    {
        "x": -1.3607540987747817,
        "y": 3.8075238715657935e-16,
        "z": -1.7147563089187976
    },
    {
        "x": -0.09804672311795848,
        "y": 1.2625342603732512e-15,
        "z": -1.6859488245594587
    },
    {
        "x": 1.2041448289088166,
        "y": 3.4228596264748546e-16,
        "z": -1.541518933833367
    }
],
    tree: [
    {
        "x": -1.081478651316902,
        "y": -1.4029002885458686e-15,
        "z": 2.318101216733135
    },
    {
        "x": -2.36492474702675,
        "y": 3.476624641537569e-16,
        "z": -1.565732544013568
    },
    {
        "x": -2.1547016042598015,
        "y": -6.835103674659114e-16,
        "z": -0.9217429637766505
    },
    {
        "x": -1.6379891863286076,
        "y": -9.847837982018857e-16,
        "z": 0.43507194662251436
    },
    {
        "x": -1.1098341887973766,
        "y": 5.667173761026297e-16,
        "z": 1.447731836159812
    },
    {
        "x": 0.9703922543468263,
        "y": -5.249769879509585e-16,
        "z": 2.364286167314022
    },
    {
        "x": 0.8882676262557944,
        "y": -4.3969172663549437e-16,
        "z": 1.9801954962335024
    },
    {
        "x": 1.0346170938132158,
        "y": -2.9940870603950366e-16,
        "z": 1.348416936950991
    },
    {
        "x": 1.2481059149331126,
        "y": -1.1568962411489321e-16,
        "z": 0.5210197480544658
    },
    {
        "x": 1.5444700753516794,
        "y": 8.476461764843865e-17,
        "z": -0.3817459004557109
    },
    {
        "x": 1.8691564486837364,
        "y": 3.225537312168362e-16,
        "z": -1.4526528637151066
    },
    {
        "x": 1.7587776827104047,
        "y": 2.1127879509660358e-16,
        "z": -0.9515151028683513
    },
    {
        "x": -2.326123483859556,
        "y": 8.040148204032195e-16,
        "z": 0.37903915443170444
    },
    {
        "x": -2.2862002748635852,
        "y": 6.772476663269938e-16,
        "z": 0.9499476622922125
    },
    {
        "x": -1.946475355773735,
        "y": -4.384767775700746e-16,
        "z": 1.9747238520752037
    },
    {
        "x": -1.5651584042074722,
        "y": -5.347205423295974e-16,
        "z": 2.4081672351829244
    },
    {
        "x": 2.2924098512201105,
        "y": -5.8523152754020545e-18,
        "z": 0.026356484893555354
    },
    {
        "x": 2.0817411053045936,
        "y": 8.078233807915534e-16,
        "z": 0.3618869232859856
    },
    {
        "x": 1.9627444236158371,
        "y": -2.2233649842643176e-16,
        "z": 1.001314571464139
    },
    {
        "x": 1.7365301361709058,
        "y": -5.155491795111562e-16,
        "z": 2.321827092737608
    },
    {
        "x": 1.7429606492781118,
        "y": -1.4333882858531248e-15,
        "z": 2.4554069500453664
    },
    {
        "x": 2.178096765456776,
        "y": -4.2760408637962714e-16,
        "z": 1.9257576040813902
    },
    {
        "x": 2.307440481791814,
        "y": -1.424912127232984e-15,
        "z": 2.417233725242167
    }
]
}
const modelCache = {};
const modelScales = {
    tree: 0.1,
    spawner: 0.2
};
function loadModel(point, selectedModel) {
    if (modelCache[selectedModel]) {
        const clone = modelCache[selectedModel].clone(true);
        clone.scale.setScalar(modelScales[selectedModel] || 0.05);
        clone.position.copy(point);
        clone.userData.tag = selectedModel;
        scene.add(clone);
    } else {
        GLTFloader.load(`./public/assets/survival/${selectedModel}.glb`, function (gltf) {
            const baseModel = gltf.scene;
            modelCache[selectedModel] = baseModel;

            const clone = baseModel.clone(true);
            clone.scale.setScalar(modelScales[selectedModel] || 0.05);
            clone.position.copy(point);
            clone.userData.tag = selectedModel;
            scene.add(clone);
        });
    }
}

export function initWorld() {
    for (const [key, points] of Object.entries(objects)) {
        points.forEach(point => {
            loadModel(point, key);
        });
    }
}
